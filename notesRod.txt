qÂ IDEAS:

- cropShape backgroundColor issue
- replicateShape + scaling, changing color
- 


- can i remove the line to crop the largest shape? i think i can for 133 but what about 28
- still worried about tryOperations score 0 (712)
- 774 add cropshape options???


- 194, 28

------------Replicate--------
- 4, 17, 53, 68, 74, 75, 79, 88, 100, 108, 111, 116, 132, 157, 172, 190, 205, 207, 208, 274, 284, 326, 362, 365, 367, 369, 421, 424, 431, 464, 467, 472, 474, 475, 494, 497, 498, 500, 509, 514, 523, 524,539, 540, 583, 592, 626, 628, 636, 650, 659, 674, 683, 716, 742, 779, 786, 795

140, 

maybe 592?
add 'all' + context? eg 583

solved: 68,75,79,111,116,172,360,367,421,500,540,645
howtocall: 524

same:
- at pixels: 53, 74, 88, 509, 205, 424, 474, 628, 674, 716, 786
- slots: 68, 645, 367, 421, 524
- at subshapes: 17, 100, 132, 157, 190, 196, 208, 659, 683, 779, 795
- everywhere: 207, 362, 539, 650
- symmetrize: 108, 284

reference:
- 626, 636, 742

other cases:
- 4, 583

---------Subshape----------
453

------------References---------
reference:  142, 181, 205, 244q
other ref: 153, 158, 208, 223, 229, 389



------------Crop-------------
unsolved crop tasks:
[28,87,204,318,395,440,445,464,473,509,586,589,624,655,676,689,768,774]

CropShape:
- Identify if output is shape
- Identify if shape is in input
- Identify characteristic attributes
- Crop

solves: 13, 30, 35, 38, 48, 56, 78, 110, 120, 133, 173, 176, 206, 215, 216, 217, 258, 262, 270, 289, 299, 345, 364,  383, 488, 576, 578, 635, 712, 727, 785, 690(sort)
solves too: 28, 395

cropframe: 13, 204
cropLargestNonbackgroudnFrame = 87, 194, 216, 258, 464
reference: 318, 690
cropsomething? 354, 365

color count in multicolor shapes: 473, 586(count holes?)	

something + cropshape: 424 (replicate), 440 (sort), 455 (overlap), 676 (encaixar)

color changes: 768, 774

OTHER: 589


--------overlapSubmatrices--------







DELTED PARTS:


#if candTask.outIsInMulticolorShapeSize:
        #    for attrs in [set(['UnSh']),set(['MoCo']),set(['MoCl']),set(['OneSh'])]:
        #        x.append(partial(cropShape, attributes=attrs, backgroundColor=0, singleColor=False, diagonals=False))
        #else:
        #    for attrs in [set(['LaSh'])]:
        #        x.append(partial(cropShape, attributes=attrs, backgroundColor=0, singleColor=True, diagonals=True))
       # if hasattr(candTask.outIsInMulticolorDShapeSize):
        #    for attrs in:
         #       x.append(partial(cropShape, attributes=attrs, backgroundColor=0, singleColor=False, diagonals=True))




                      
    elif anchorType == 'subshape':
        for repShs in repList:
            for repSh in repShs:
                for sh2 in shList:
                    if sh2.isSubshape(repSh,sameColor=True,rotation=False,mirror=False) and len(sh2.pixels)<len(repSh.pixels):
                        for x in range((repSh.shape[0]-sh2.shape[0])+1):
                            for y in range((repSh.shape[1]-sh2.shape[1])+1):
                                if np.all(np.logical_or(sh2.m == 255, repSh.m[x: x+sh2.shape[0],y:y+sh2.shape[1]] == sh2.m)):
                                    #if np.all(np.logical_or(m[max(sh2.position[0]-x,0):min(sh2.position[0]-x+repSh.shape[0],m.shape[0]),\
                                    #                          max(sh2.position[1]-y,0):min(sh2.position[1]-y+repSh.shape[1],m.shape[1]] == matrix.backgroundColor),\)):
                                        newInsert = copy.deepcopy(repSh)
                                        newInsert.position = (sh2.position[0]-x, sh2.position[1]-y)
                                        if sh2.position[1]-y<0:
                                            newInsert.position = (sh2.position[0], 0)
                                            newInsert.m = newInsert.m[::,y-sh2.position[1]:]
                                            newInsert.shape = newInsert.m.shape
                                        if sh2.position[0]-x<0:
                                            newInsert.position = (0, sh2.position[1])
                                            newInsert.m = newInsert.m[x-sh2.position[0]:,:]
                                            newInsert.shape = newInsert.m.shape
                                        m=insertShape(m, newInsert)